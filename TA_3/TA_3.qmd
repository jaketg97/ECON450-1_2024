---
title: "TA Session 3"
subtitle: "Demand estimation for PSET4"
format:
  revealjs: 
    slide-number: true
    preview-links: auto
    css: styles.css
    self-contained: true
resources:
  - demo.pdf
jupyter: python3
---

## Plan for today

This TA session is solely dedicated to your questions on PSET4. It's organized as follows:

1.  General tips
2.  Theory
3.  Implementation
4.  My version

## General tips 

- This is going to take time. Don't leave it for the last minute.
- **Read**. This TA session/Gaston's slides alone are almost certainly not going to be enough. I found Dube Fox Su (2012) and the corresponding [appendix](https://www.google.com/url?sa=t&source=web&rct=j&opi=89978449&url=https://www.econometricsociety.org/publications/econometrica/2012/09/01/improving-numerical-performance-static-and-dynamic-aggregate/supp/8585_extensions_0.pdf&ved=2ahUKEwi-_6yX3-uJAxXSmIkEHaHZJKEQFnoECBsQAQ&usg=AOvVaw22HuR_G9AtRkTZOs-seBx6) helpful, along with Nevo (2001) + appendix, and PyBLP has good documentation.
- Hardest part is **Jacobian of MPEC constraints**. This is where some of the tricks we cover today will be most helpful, in particular recovering $\partial S/\partial \delta$ using "Gaston's trick".
- Be persistent! You'll feel stuck a lot on this; it's normal, and **you can get this right**. Easiest to do when you give yourself a lot of time.

# Theory

## Original problem

### Random Coefficients Logit (Mixed Logit)
The indirect utility of consumer i from consuming product j in market t:

$$
u_{ijt} = \beta_i x_{jt} + \alpha_i p_{jt} + \xi_{jt} + \epsilon_{ijt}
$$

Where:

- $p_{jt}$: price of product $j$ in market $t$
- $x_{jt}$: $K$-dimensional vector of observable characteristics of product $j$
- $\xi_{jt}$: unobserved product characteristic
- $\epsilon_{ijt}$: idiosyncratic i.i.d error term
- $\alpha_i$: consumer $i$’s marginal utility of income
- $\beta_i$: $K$-dimensional vector of individual-specific taste coefficients

## Rewriting the Indirect Utility
Rewriting gives:

$$
u_{ijt} = \beta_0 x_{jt} + \sum \sigma_{\beta_j} \nu^\beta_i x_{jt} + \alpha_0 p_{jt} + \sigma_\alpha \nu^\alpha_i p_{jt} + \xi_{jt} + \epsilon_{ijt}
$$

This can be expressed as:

$$
u_{ijt} = \delta_{jt} + \mu_{ijt} + \epsilon_{ijt}
$$

Where:

- $\delta_{jt} = \beta_0 x_{jt} + \alpha_0 p_{jt} + \xi_{jt}$
- $\mu_{ijt} = \sum \sigma \nu^\beta_i x_{jt}$


## Market Shares
Assuming $\epsilon_{ijt}$ is i.i.d with a Type I extreme-value distribution, the probability that consumer $i$ purchases product $j$ in market $t$ is:

$$
s_{ijt}(\delta_{jt}, \theta_2) = \frac{e^{\delta_{jt} + \mu_{ijt}}}{1 + \sum_k e^{\delta_{kt} + \mu_{ikt}}}
$$

Integrating over all consumers gives the market share of product $j$:

$$
s_{jt}(\delta_{jt}, \theta_2) = \int \frac{e^{\delta_{jt} + \mu_{ijt}}}{1 + \sum_k e^{\delta_{kt} + \mu_{ikt}}} dF_\nu(\theta_2)
$$

## Inversion, Contraction, and Moments
From Berry (1994), at the true values of $\delta$:

$$
s_{jt} = s_{jt}(\delta_{jt}, \theta_2)
$$

BLP (1995) shows the contraction mapping to obtain $\delta$:

$$
\delta^{h+1} = \delta^h + \ln(s) - \ln(s(\delta^h, \theta_2))
$$

## Estimation Outline

1. Pick $\delta_0, \theta_0$ arbitrarily.
2. Iterate on the contraction mapping to find $\delta_1, \xi_1$.
3. Calculate moments:

$$
\bar{g}_n(\theta) = \frac{1}{JT} \sum_{j,t} f(z_{jt}) \cdot \xi_{jt}
$$

4. Calculate GMM objective function, gradient, and Hessian.
5. Update $\theta_1$ and repeat until a minimum is found.

## Rewriting the Problem as an MPEC

Reframe NFP problem as an MPEC:

$$
\min_{\theta_2, \delta, \eta} \eta' W \eta
$$

Subject to:

$$
s(\delta, \theta_2) - s = 0, \quad \bar{g}_n(\delta) - \eta = 0
$$

**YOU SHOULD DO IT THIS WAY** (with standard "you may be better at this than me" caveats). Moments are defined in Gaston's Demand III slides (use $E[\xi z] = 0$, recover $\xi$ from residuals of instrument regression on $\delta$).

**TIP**: I found it helpful to still write an inner loop; this way you can easily supply "correct" first guesses, i.e. make sure your $\theta_2$ matches your $\delta$ such that $s(\delta, \theta_2) = s$.

## A Note on the Shares: Simulation

Note that $\nu_i$ is not data. For example, in the problem set, draw $\nu_i$ from a lognormal distribution. To get $s_j$:

$$
s_{jt}(\delta_{jt}, \theta_2) \approx \frac{1}{I} \sum_{i=1}^{I} \frac{e^{\delta_{jt} + \mu_{ijt}}}{1 + \sum_k e^{\delta_{kt} + \mu_{ikt}}}
$$

For improved simulation, consider importance sampling **(not necessary for the problem set)**.

## Adding a supply side (1)

Consider the profits of firm $f$, which for a single market $t$ controls several products $J_{ft}$ and sets prices $p_{jt}$ ($M$ is market size).

$$
\max_{p_{jt} : j \in J_{ft}} \sum_{j \in J_{ft}} M \cdot s_{jt}(p_t) \cdot (p_{jt} - c_{jt}),
$$



Taking first order conditions we get:

$$
s_{jt}(p_t) + \sum_{k \in J_{ft}} \frac{\partial s_{kt}}{\partial p_{jt}}(p_t) \cdot (p_{kt} - c_{kt}) = 0
$$

In matrix form, for a single market $t$, we have:

$$
\mathbb{s_t(p_t) = \Delta_t(p_t) \cdot (p_t - c_t) \implies \Delta_t(p_t)^{-1} s_t(p_t)} := b(\mathbb{p_t, s_t,} \theta_2) = \mathbb{p_t - c_t}
$$

where the markup $= p_t - c_t$.

## Adding a supply side (2)

The multi-product Bertrand markup $b(\mathbb{p_t, s_t}, \theta_2)$ depends on $\Delta_t(\mathbb{p_t, s_t}, \theta_2)$, a $J_t \times J_t$ matrix of intra-firm demand derivatives given by:

$$
\Delta_t(\mathbb{p_t}) \equiv -H_t \odot \mathbb{\frac{\partial s_t}{\partial p_t}(p_t)}
$$

which is the element-wise Hadamard product of two $J_t \times J_t$ matrices: the matrix of demand derivatives with each $(j,k)$ entry given by $\frac{\partial s_{jt}}{\partial p_{kt}}$ and the ownership matrix $H_t$ with each $(j,k)$ entry indicating whether the same firm produces products $j$ and $k$.

Note: In $H_t$, each $(j,k)$ entry equals 1 if both $j, k \in J_{ft}$ for some $f \in F_t$, and equals 0 otherwise.

We can easily consider alternative forms of conduct such as Single- or Multi-Product Oligopoly, or Monopoly (Question 3, part 2 of the Problem Set).

## Adding a supply side (3)

Marginal costs can be parametrized. In BLP:

$$
\ln(mc_{jt}) = w_{jt} \gamma + \omega_{jt}.
$$

Logarithm ensures positive marginal costs. But we know that $mc_{jt} = p_{jt} - b_{jt}(\mathbb{p_t, s_t}, \theta_2)$. Then

$$
\ln(p_{jt} - b_{jt}(\mathbb{p_t, s_t}, \theta_2)) = w_{jt} \gamma + \omega_{jt} \implies \omega_{jt} = \ln(p_{jt} - b_{jt}(\mathbb{p_t, s_t}, \theta_2)) - w_{jt} \gamma
$$

So now, we can add moment conditions of the form:

$$
E[f(z^s) \cdot \omega] = 0
$$

## The problem to solve

The problem to solve would then be:

$$
\min_{\theta_2, \delta, \eta} \eta' W \eta
$$

subject to:

$$
s(\delta, \theta_2) - s = 0
$$

$$
\bar{g}_n(\theta) - \eta = 0 \text{ with } \bar{g}_n(\theta) = \left[ \frac{1}{JT} \sum_{j,t} f(z_{jt}) \cdot \xi_{jt}, \frac{1}{JT} \sum_{j,t} f(z_{jt}) \cdot \omega_{jt} \right]
$$

When estimating jointly (3.2.c), $\theta_2 \rightarrow \theta^{joint} = [\theta_2, \gamma]$

# Implementation

## Gradient and Jacobian

1. **Gradient and Jacobian Requirements**
It is imperative to supply the gradient of the objective function and the Jacobian to whatever solver you're using. You will need to calculate yourself directly. In MPEC, you’ll minimize with respect to $\theta_2$, $\delta$, and $\eta$.

2. **Gradient Calculation**
The gradient is given by:
   $$
   \nabla_{\theta_2, \delta, \eta} = \begin{bmatrix} 0 & 0 & 2\eta \end{bmatrix}
   $$
**Note:** The gradient derivatives must be in the same order as the parameters provided to the solver.

## Gradient and Jacobian cont.

3. **Jacobian Structure**
    $$
   \begin{bmatrix}
   \frac{\partial s}{\partial \theta_2} & \frac{\partial s}{\partial \delta} & 0 \\
   0 & \frac{1}{JT} (A \cdot Z)' & -I
   \end{bmatrix}
   $$
   - **Note:** The Jacobian rows depend on the order of the constraints supplied to the solver, while the columns depend on the order of the parameters. Also note that this is just for demand estimation, not joint as in 3.2.c.
   - $Z$ refers to the matrix of instruments or functions of instruments $f(z)$ you decide to use.

## Gradient and Jacobian cont.

4. **Jacobian Order and Signs**
   - The Jacobian respects the order and signs of the MPEC problem outlined in these slides.
   - With:
   $$
   A = I - \bar{X} \cdot (\bar{X}' \cdot P_z \cdot \bar{X})^{-1} \cdot \bar{X} \cdot P_z
   $$
   - Where $\bar{X} = [x, p]$ and $P_z = Z \cdot (Z' \cdot Z)^{-1} \cdot Z$.
   - **NOTE: This Jacobian is for demand parameters only, not joint estimation as in 3.2.c**. 

## Recover $\partial s / \partial \delta$

$$
\begin{align}
& s_{ijt}(\theta_2) = \frac{\exp(\delta_{jt} - \theta_2 \nu_i p_{jt})}{1 + \sum_{k=1}^3 \exp(\delta_{kt} - \theta_2 \nu_i p_{kt})} := \frac{\alpha_{ijt}}{1 + \sum^3_{k=1} \alpha_{ikt}} \\
& \partial s_{ijt}/\partial \delta_{jt} = \frac{\alpha_{ijt} (1 + \sum^3_{k=1} \alpha_{ikt}) - \alpha_{ijt} \alpha_{ikt}}{(1 + \sum^3_{k=1} \alpha_{ikt})^2} = s_{ijt} (1 - s_{ijt}) \\
& \partial s_{ijt}/\partial \delta_{kt} = -\frac{\alpha_{ijt} \alpha_{ikt}}{(1 + \sum^3_{k=1} \alpha_{ikt})^2} = -s_{ijt} s_{ikt}
\end{align}
$$
With derivations in mind, you can construct the whole Jacobian matrix $\partial s / \partial \delta$

1. For market $m$, construct $\{\partial s_{ijm}/\partial \delta_{im}\} = -s_{im} s_{im}' + \text{diag}(s_{ijm})$. Think out.
2. Average across $i$.
3. The whole Jacobian is just the block matrix market-by-market.

## Recover analytic standard errors

 - Solve a one-step GMM with $W = I$.
 - The variance-covariance matrix would then be:
   $$
   V_{\text{GMM}} = [G' G]^{-1} G' \bar{B} G [G' G]^{-1}
   $$
 - Where $G \approx \frac{1}{JT} \sum_{j,t} \frac{\partial g(\theta)}{\partial \theta}$, $\bar{B} \approx \frac{1}{JT} \sum_{j,t} g(\theta) g(\theta)'$

 - What is $\frac{\partial g(\theta)}{\partial \theta}$? Focus on demand-side moments first:
 $$
 \frac{\partial g(\theta)}{\partial \theta} = \frac{\partial f(z_{jt}) \cdot \xi_{jt}}{\partial \theta_2}
 = f(z_{jt}) \cdot \frac{\partial (\delta_{jt} - \beta_0 x_{jt} + \alpha_0 p_{jt})}{\partial \theta_2}
= f(z_{jt}) \cdot \frac{\partial \delta_{jt}}{\partial \theta_2}
 $$
 - Note that $\delta$ depends on $\theta_2$ through the share matching constraint:
 $= f(z_{jt}) \cdot \frac{\partial s_{jt}}{\partial \delta}^{-1} \cdot \frac{\partial s_{jt}}{\partial \theta_2}$ (By the Implicit Function Theorem.)

## Recover analytic standard errors cont.

For the supply side moments we have:

$$
\frac{\partial g(\theta)}{\partial \theta} = \frac{\partial f(z_{jt}) \cdot \omega_{jt}}{\partial \theta_2},
$$

since we solve for $\theta_2$ in MPEC:

$$
f(z_{jt}) \cdot \frac{\partial (p_{jt} - b_{jt}(\theta_2) - w_{jt} \gamma)}{\partial \theta_2} = f(z_{jt}) \cdot - \frac{\partial b_{jt}(\theta_2)}{\partial \theta_2}
$$

where (if $\theta_2$ is not a vector, but a parameter like in the problem set):

$$
\frac{\partial b(\theta_2)}{\partial \theta_2} = \frac{\partial \Delta_t(\mathbb{p_t})^{-1}}{\partial \theta_2} \mathbb{s_t(p_t)} + \Delta_t(\mathbb{p_t})^{-1} \frac{\partial \mathbb{s_t(p_t)}}{\partial \theta_2}
$$

$$
= -\Delta^{-1} \frac{\partial \Delta}{\partial \theta_2} \Delta^{-1} \mathbb{s_t(p_t)} + \Delta_t(\mathbb{p_t})^{-1} \frac{\partial \mathbb{s_t(p_t)}}{\partial \theta_2}
$$
# My version

## Preview

**Pseudo-code:**

1. Form initial guess of $\theta_2^0$ and $\delta^0$ (set $\delta^0 = \delta(\theta_2^0)$ using contraction mapping, helps with convergence). Supply arbitrary initial $\eta^0 = 1$.
2. Calculate shares implied by initial guess, $s(\delta^0, \theta_2^0)$.
3. Calculate moments, $\bar{g}_n(\delta)$.
    - Recover $\xi^0 = (I - X(X'P_ZX)^{-1}X'P_Z)\delta^0$.
    - Moments are of form $E[\xi z] = 0$. 
4. Calculate MPEC objective function, gradient, and constraint Jacobian. 
5. Rinse and repeat until convergence.

**Just because I did it this way doesn't mean it's the best way.** Do not feel required to follow it.
  
## Shares Calculation

- $shares\_im(\theta_2, \delta_m, p_m, v_i)$: returns vector of shares for each product given market/person, i.e. for ($i$, $m$) returns $s_{ijm} = \frac{\exp(\delta_{jm} + \mu_{ijm}(\theta_2))}{1 + \sum_k \exp(\delta_{km} + \mu_{ikm}(\theta_2))}$, where $\mu_{ijm}(\theta_2) = -\theta_2 v_i p_{jm}$
- $shares\_m(\theta_2, \delta_m, p_m, \{v_i\})$: Given a guess of $\theta_2$, a $\delta_m$, and a vector of random $v_i$ drawn from the LN(0,1) distribution, return a vector of the estimated shares for each product in a given market according to the generic approach outlined in the slides: for market $m$, returns vector of $\hat{s_{m}} = \frac{1}{N} \sum_i^N shares\_im(p_m, \delta_m, \theta_2, v_i)$
- $shares(\theta_2, \delta, p, \{v_i\})$: Returns vector \{$shares\_m(p_m, \delta_m, \theta_2, \{v_i\})\}_{m \in M}$, i.e. averaged shares for each market (I flatten the 2-d array to make constraints). This is what I'll use for my MPEC. 

and corresponding derivatives...

## Shares Calculation

```{python}
#| echo: true
#| output-location: slide

# Pre-question, loading libraries and data
from scipy.io import loadmat
import jaxopt as jaxopt
from PSET4_functions.misc import *
from PSET4_functions.shares import *
from PSET4_functions.delta import *
from PSET4_functions.moments import * 
from PSET4_functions.mpec_wrapper import *

# Load data
m100_j3 = loadmat("data/100markets3products.mat")
dat = clean_data(m100_j3, 3)
random_vs = np.random.lognormal(0, 1, 1000)
shares_data_long = dat[['sjm']].to_numpy()
prices_data_long = dat[['pjm']].to_numpy() 
shares_data_wide = shares_data_long.reshape(100,3)
prices_data_wide = prices_data_long.reshape(100,3)

# Compute shares
theta_2_0 = np.array([.1]) 
delta_0 = inner_loop(theta_2_0, logit_delta(shares_data_wide).reshape(100, 3), shares_data_wide, prices_data_wide, random_vs)
shares(theta_2_0, delta_0, prices_data_wide, random_vs)
```

## Moments Calculation

- hausman_instruments(p_wide): given price data in "wide" form (mXj), construct Hausman instrument: $\frac{1}{M-1} \sum_{n \neq m} P_{jn}$
- blp_instruments(x_3d): given a 3d matrix of mXjXcharacteristics (so 100X3X3) construct the BLP instruments matrix: $[x_{1jm}, x_{2jm}, x_{3jm}, \sum_{k \neq j} x_{2km}, \sum_{k \neq j} x_{3km}]$.
- g(delta, prices_wide, x_long, z): construct moments $Z * \hat{\xi}$, where $\hat{\xi}$ is the residuals of an GMM IV of $Z$ on $\delta = \beta X + \alpha P$, i.e. $(I - X (X' P_z X)^{-1} X P_z) \delta$.
- g_ddelta(delta, prices_wide, x_long, x_3d): returns analytic derivative (just residual maker matrix for now; going to be a mess when I start joint estimating supply and demand).
- g_jm: construct moments observation by observation (i.e. by jm). I need this to estimate analytic SEs.

## Moments Calculation

```{python}
#| echo: true
#| output-location: slide

# Pre-question, loading libraries and data
from scipy.io import loadmat
import jaxopt as jaxopt
from PSET4_functions.misc import *
from PSET4_functions.shares import *
from PSET4_functions.delta import *
from PSET4_functions.moments import * 
from PSET4_functions.mpec_wrapper import *

# Load data
m100_j3 = loadmat("data/100markets3products.mat")
dat = clean_data(m100_j3, 3)
random_vs = np.random.lognormal(0, 1, 1000)
shares_data_long = dat[['sjm']].to_numpy()
prices_data_long = dat[['pjm']].to_numpy() 
shares_data_wide = shares_data_long.reshape(100,3)
prices_data_wide = prices_data_long.reshape(100,3)
shares_data_long = dat[['sjm']].to_numpy()
prices_data_long = dat[['pjm']].to_numpy() 
x_data_long = dat[['X1jm', 'X2jm', 'X3jm']].to_numpy()
x_data_long = dat[['X1jm', 'X2jm', 'X3jm']].to_numpy()
x_data_3d = x_data_long.reshape(100, 3, 3)
blp_data = blp_instruments(x_data_3d) 
hausman_data = hausman_instruments(prices_data_wide)
z_data = np.concatenate([blp_data, hausman_data.reshape(-1,1)], axis=1)


# Compute shares
theta_2_0 = np.array([.1]) 
delta_0 = inner_loop(theta_2_0, logit_delta(shares_data_wide).reshape(100, 3), shares_data_wide, prices_data_wide, random_vs)
g(delta_0, prices_data_wide, x_data_long, x_data_3d, z_data)
```

## Putting it all together

- mpec_objective: objective function for my MPEC
- mpec_gradient: gradient for my MPEC
- mpec_jacobian: jacobian for my MPEC (putting together the pieces as defined by functions above)
- beta_alpha: recover $\beta$ and $\alpha$ from the results of my MPEC
- standard_errors: recovers analytic SEs for $\beta$, $\alpha$, and $\sigma_\alpha$, via...
    1. calculating $V_{GMM}$ for $\theta_2$ with $W=I$, i.e. $[G'G]^{-1}G'BG[G'G]^{-1}$, where $G = \frac{dg}{d\theta_2} = Z_{jt} (\frac{ds}{d\delta}^{-1} \frac{ds}{d\theta_2})$, $B = \frac{1}{JT} \sum_{j,t}g(\theta_2)g'(\theta_2)$
    2. recover variance for $\alpha, \beta$ via delta method, i.e. for $C = (X' P_Z X)^{-1} X' P_Z$, $[\alpha, \beta] = C \delta(\theta_2) = f(\theta_2)$. Note that $f'(theta_2) = C \frac{d\delta}{d\theta_2} = C (\frac{ds}{d\delta}^{-1} \frac{ds}{d\theta_2})$, and via delta method if $\theta_2 ~ N(0, \sigma^2)$, $[alpha, \beta] ~ N(0, f'(theta_2)^2 \sigma^2$  

## Putting it all together

```{python}
#| echo: true
#| output-location: slide

# Pre-question, loading libraries and data
from scipy.io import loadmat
import jaxopt as jaxopt
from PSET4_functions.misc import *
from PSET4_functions.shares import *
from PSET4_functions.delta import *
from PSET4_functions.moments import * 
from PSET4_functions.mpec_wrapper import *

# load data
m100_j3 = loadmat("data/100markets3products.mat")
dat = clean_data(m100_j3, 3)
shares_data_long = dat[['sjm']].to_numpy()
prices_data_long = dat[['pjm']].to_numpy() 
x_data_long = dat[['X1jm', 'X2jm', 'X3jm']].to_numpy()
shares_data_wide = shares_data_long.reshape(100,3)
prices_data_wide = prices_data_long.reshape(100,3)
x_data_3d = x_data_long.reshape(100, 3, 3)
blp_data = blp_instruments(x_data_3d) 
hausman_data = hausman_instruments(prices_data_wide)
z_data = np.concatenate([blp_data, hausman_data.reshape(-1,1)], axis=1)
np.random.seed(456)
random_vs = np.random.lognormal(0, 1, 1000)

# ESTIMATING PARAMETERS

theta_2_0 = np.array([.1]) 
delta_0 = inner_loop(theta_2_0, logit_delta(shares_data_wide).reshape(100, 3), shares_data_wide, prices_data_wide, random_vs)
dat[["delta_0"]] = delta_0.reshape(-1,1)
beta, alpha, sigma_alpha, delta_hat = full_mpec_wrapper(theta_2_0, dat, z_data, random_vs, 100, 3)

# RECOVERING ANALYTIC SEs
beta_alpha_se, sigma_alpha_se = standard_errors(sigma_alpha, delta_hat, z_data, prices_data_wide, x_data_long, x_data_3d, random_vs)
print("Results(100X3, BLP and Hausman Instruments)")
results = [["beta_1", beta[0], beta_alpha_se[0]], 
           ["beta_2", beta[1], beta_alpha_se[1]], 
           ["beta_3", beta[2], beta_alpha_se[2]], 
           ["-alpha", alpha, beta_alpha_se[3]], 
           ["sigma_alpha", sigma_alpha, sigma_alpha_se]]
headers = ["estimates", "standard errors"]
print(tabulate(results, headers, tablefmt="plain"))
```